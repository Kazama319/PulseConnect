{"version":3,"sources":["components/SingleChat.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","components/Authentication/Login.js","components/Authentication/Signup.js","App.js","reportWebVitals.js","index.js"],"names":["socket","selectedChatCompare","HomePage","history","useHistory","bg","color","minH","p","direction","align","justify","w","spacing","textAlign","flex","maxW","fontSize","fontWeight","colorScheme","variant","size","onClick","push","position","h","ml","base","md","src","alt","borderRadius","boxShadow","objectFit","top","left","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","name","getSender1","pic","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","display","icon","View","backgroundColor","_hover","isCentered","fontFamily","justifyContent","borderBottom","borderColor","flexDirection","alignItems","padding","overflow","boxSize","mb","email","borderTop","ChatContext","createContext","ChatState","useContext","ChatProvider","useState","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","useEffect","userInfo","JSON","parse","localStorage","getItem","Provider","value","ScrollableChat","map","style","label","placement","hasArrow","mt","mr","cursor","marginLeft","marginTop","maxWidth","wordBreak","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","background","d","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","loading","setLoading","renameloading","setRenameLoading","toast","useToast","handleSearch","query","a","config","headers","Authorization","token","axios","get","data","console","log","title","description","status","duration","isClosable","handleRename","put","chatId","chatName","response","message","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexDir","flexWrap","pb","placeholder","onChange","e","target","isLoading","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","post","io","on","newMessageReceived","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","id","isRequired","options","width","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","borderWidth","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","stringify","textColor","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","clear","borderBottomWidth","borderBottomColor","_placeholder","Chatpage","Login","show","setShow","setEmail","password","setPassword","submitHandler","setItem","bgGradient","type","Signup","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","setName","confirmpassword","setConfirmpassword","setPic","picLoading","setPicLoading","accept","pics","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","App","path","component","Homepage","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e85a47cb.chunk.js","sourcesContent":["import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageReceived) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageReceived.chat._id\n      ) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageReceived]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n            color=\"white\"\n          >\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n              color=\"white\"\n              bg=\"transparent\"\n              _hover={{ bg: \"gray.700\" }}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"black\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n                color=\"white\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"gray.700\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n                color=\"white\"\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"white\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import React from \"react\";\nimport { Box, Flex, Text, Button, Image, VStack, HStack } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\n\nconst HomePage = () => {\n  const history = useHistory();\n  const handleSignUpClick = () => {\n    history.push('/signup'); // Navigate to the login page\n  };\n  const loginup = () => {\n    history.push('/login'); // Navigate to the login page\n  };\n  return (\n\n    <Box bg=\"gray.900\" color=\"white\" minH=\"full\" p={4}>\n      <Flex direction=\"row\" align=\"center\" justify=\"center\" w=\"full\" spacing={4}>\n        {/* Left Section */}\n        <VStack spacing={8} textAlign=\"center\" flex=\"1\" maxW=\"full\">\n          <Text fontSize=\"5xl\" fontWeight=\"bold\" color=\"teal.400\">\n            Welcome to Pulse Connect\n          </Text>\n          <Text fontSize=\"xl\" color=\"gray.300\">\n            Connect with your friends and family seamlessly. Experience the best chat application with real-time messaging, groups, and more.\n          </Text>\n          <HStack spacing={4}>\n            <Button colorScheme=\"teal\" variant=\"solid\" size=\"lg\" onClick={loginup} >\n              Login\n            </Button>\n            <Button colorScheme=\"teal\" variant=\"outline\" size=\"lg\" onClick={handleSignUpClick}>\n              Sign Up\n            </Button>\n          </HStack>\n        </VStack>\n        {/* Right Section */}\n        <Box\n          position=\"relative\"\n          flex=\"1\"\n          maxW=\"700px\"\n          w=\"full\"\n          h=\"full\"\n          ml={{ base: 0, md: 4 }}\n        >\n          <Image\n            src=\"https://i.imgur.com/U3vTGjX.png\" // Replace with your chat app image URL\n            alt=\"Chat App\"\n            borderRadius=\"md\"\n            boxShadow=\"lg\"\n            objectFit=\"cover\"\n            w=\"85%\"\n            h=\"85%\"\n          />\n          <VStack\n            position=\"absolute\"\n            top=\"20%\"\n            left=\"5%\"\n            spacing={4}\n            align=\"flex-start\"\n            bg=\"gray.800\"\n            p={4}\n            borderRadius=\"md\"\n            boxShadow=\"lg\"\n            maxW=\"300px\"\n          >\n            <HStack align=\"flex-start\">\n              <Box bg=\"teal.500\" p={3} borderRadius=\"md\" color=\"white\">\n                Hey! How are you?\n              </Box>\n            </HStack>\n            <HStack align=\"flex-start\">\n              <Box bg=\"gray.700\" p={3} borderRadius=\"md\" color=\"white\">\n                I'm good, how about you?\n              </Box>\n            </HStack>\n            <HStack align=\"flex-start\">\n              <Box bg=\"teal.500\" p={3} borderRadius=\"md\" color=\"white\">\n                Doing great! Let's catch up soon.\n              </Box>\n            </HStack>\n          </VStack>\n        </Box>\n      </Flex>\n    </Box>\n  );\n};\n\nexport default HomePage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSender1 = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].pic : users[0].pic;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n  Box,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton\n          display={{ base: \"flex\" }}\n          icon={<ViewIcon />}\n          onClick={onOpen}\n          backgroundColor=\"black\"\n          color=\"white\"\n          _hover={{ backgroundColor: \"gray.700\" }}\n        />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent\n          h=\"450px\"\n          backgroundColor=\"gray.900\"\n          color=\"white\"\n          borderRadius=\"15px\"\n          boxShadow=\"lg\"\n        >\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            display=\"flex\"\n            justifyContent=\"center\"\n            borderBottom=\"1px solid\"\n            borderColor=\"gray.700\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton color=\"white\" />\n          <ModalBody\n            display=\"flex\"\n            flexDirection=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            padding=\"20px\"\n          >\n            <Box\n              borderRadius=\"full\"\n              overflow=\"hidden\"\n              boxSize=\"150px\"\n              mb={4}\n              boxShadow=\"0 0 10px rgba(255, 255, 255, 0.5)\"\n            >\n              <Image\n                borderRadius=\"full\"\n                boxSize=\"150px\"\n                src={user.pic}\n                alt={user.name}\n              />\n            </Box>\n            <Text\n              fontSize={{ base: \"24px\", md: \"26px\" }}\n              fontFamily=\"Work sans\"\n              textAlign=\"center\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter borderTop=\"1px solid\" borderColor=\"black\">\n            <Button\n              onClick={onClose}\n              backgroundColor=\"black\"\n              color=\"white\"\n              _hover={{ backgroundColor: \"gray.600\" }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#6B46C1\" : \"#3182CE\"\n                }`,\n                color: \"white\",\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n                wordBreak: \"break-word\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst UserListItem = ({user,  handleFunction }) => {\n  //const { user } = ChatState();\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"gray.700\"\n      _hover={{\n        background: \"purple.700\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"white\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\" color=\"blue.400\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDirection=\"column\"\n      p={3}\n      bg=\"gray.800\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      borderColor=\"gray.700\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n            bg=\"teal.500\"\n            textColor=\"white\"\n          >\n            Create Group Chat\n          </ModalHeader \n          >\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\" bg=\"gray.700\">\n            <FormControl>\n              <Input\n              bg=\"black\"\n              textColor=\"white\"\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                bg=\"black\"  \n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                textColor = \"white\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" color=\"black\" >\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                bg=\"black\"\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                  bg=\"black\"\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter bg=\"gray.700\">\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text, HStack } from \"@chakra-ui/layout\";\nimport { Avatar, Button, useToast } from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender,getSender1 } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"gray.800\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n      borderColor=\"gray.700\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        display=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        color=\"white\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            display=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n            bg=\"teal.500\"\n            color=\"white\"\n            _hover={{ bg: \"teal.400\" }}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        p={3}\n        bg=\"gray.900\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n             // console.log(chat.users),\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat && selectedChat._id === chat._id ? \"teal.700\" : \"gray.700\"}\n                color={selectedChat && selectedChat._id === chat._id ? \"white\" : \"gray.200\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n                _hover={{ bg: selectedChat && selectedChat._id === chat._id ? \"teal.700\" : \"gray.600\" }}\n              >\n                <HStack spacing={3} align=\"center\">\n                  <Avatar\n                    size=\"md\"\n                    name={!chat.isGroupChat ? getSender1(loggedUser, chat.users) : chat.chatName}\n                    src={!chat.isGroupChat && getSender1(loggedUser, chat.users)}\n                    {...console.log(getSender(loggedUser, chat.users))}\n                  />\n                  <Box>\n                    <Text fontWeight=\"bold\">\n                      {!chat.isGroupChat\n                        ? getSender(loggedUser, chat.users)\n                        : chat.chatName}\n                    </Text>\n                    {chat.latestMessage && (\n                      <Text fontSize=\"xs\" color=\"gray.400\">\n                        <b>{chat.latestMessage.sender.name} : </b>\n                        {chat.latestMessage.content.length > 50\n                          ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                          : chat.latestMessage.content}\n                      </Text>\n                    )}\n                  </Box>\n                </HStack>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n    setUser,\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    localStorage.clear();\n    setUser(null);\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"gray.900\"\n        w=\"100%\"\n        p=\"5px 10px\"\n        borderWidth=\"0px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button onClick={onOpen} colorScheme=\"blue\" variant=\"solid\" m={1} p={2}>\n            <i className=\"fas fa-search\"></i>\n           <Text d={{ base: \"none\", md: \"flex\" }} p={1} color=\"white\">\n  Search User\n</Text>\n\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\" color='white' fontWeight=\"bold\">\n          Pulse Connect\n        </Text>\n        <div className=\"bg-gray-900\">\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} color=\"white\" />\n            </MenuButton>\n            <MenuList pl={2} bg=\"gray.900\" borderColor=\"gray.800\">\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                  bg=\"gray.900\"\n                  _hover={{ bg: \"gray.800\" }}\n                  color=\"white\"\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"gray.500\" rightIcon={<ChevronDownIcon />} _hover={{ bg: \"purple.500\" }}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n                _hover={{ bg: \"purple.500\" }}\n              />\n            </MenuButton>\n            <MenuList bg=\"gray.900\" borderColor=\"gray.800\">\n  <ProfileModal user={user}>\n    <MenuItem\n      color=\"white\"\n      _hover={{ color: \"white\", bg: \"purple.500\" }}\n    >\n      My Profile\n    </MenuItem>\n  </ProfileModal>\n  <MenuDivider />\n  <MenuItem\n    onClick={logoutHandler}\n    color=\"white\"\n    _hover={{ color: \"white\", bg: \"purple.500\" }}\n  >\n    Logout\n  </MenuItem>\n</MenuList>\n\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent bg=\"gray.900\">\n          <DrawerHeader borderBottomWidth=\"1px\" borderBottomColor=\"gray.800\" color=\"white\">\n            Search Users\n          </DrawerHeader>\n          <DrawerBody bg=\"gray.900\" color=\"white\">\n            <Box d=\"flex\" justifyContent=\"space-between\"pb={2} bg=\"gray.700\" borderRadius=\"md\" mb={3}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={0}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                bg=\"gray.600\"\n                color=\"white\"\n                borderColor=\"gray.400\"\n                _placeholder={{ color: \"gray.400\" }}\n              />\n              <Button onClick={handleSearch} bg=\"blue.700\" color=\"white\">Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user1) => (\n                <UserListItem\n                  key={user1._id}\n                  user={user1}\n                  handleFunction={() => accessChat(user1._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n\n   <div style={{ width: \"100%\", margin: 0, padding: 0 }}>\n  {user && <SideDrawer />}\n  <Box display=\"flex\" justifyContent=\"flex-start\" w=\"100%\" h=\"93vh\" p={0} m={0}>\n    {user && <MyChats fetchAgain={fetchAgain}  />}\n    {user && <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain}  />}\n  </Box>\n</div>\n\n\n\n\n  );\n};\n\nexport default Chatpage;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, Box, Heading } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      w=\"full\"\n      alignItems=\"center\"\n      height=\"100vh\"\n      bgGradient=\"linear(to-r, teal.500, blue.500)\"\n      p={4}\n    >\n      <Box\n        bg=\"gray.700\"\n        textColor=\"white\"\n        p={8}\n        borderRadius=\"md\"\n        boxShadow=\"lg\"\n      \n        width=\"100%\"\n        maxWidth=\"md\"\n        textAlign=\"center\"\n      >\n        <Heading mb={6} size=\"lg\" color=\"teal.600\">\n          Login to Your Account\n        </Heading>\n        <VStack spacing=\"24px\">\n          <FormControl id=\"email\" isRequired>\n            <FormLabel>Email Address</FormLabel>\n            <Input\n              value={email}\n              textColor=\"white\"\n              type=\"email\"\n              placeholder=\"Enter Your Email Address\"\n              onChange={(e) => setEmail(e.target.value)}\n              borderColor=\"teal.500\"\n              _placeholder={{ color: 'gray.500' }}\n            />\n          </FormControl>\n          <FormControl id=\"password\" isRequired>\n            <FormLabel>Password</FormLabel>\n            <InputGroup size=\"md\">\n              <Input\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                type={show ? \"text\" : \"password\"}\n                placeholder=\"Enter password\"\n                borderColor=\"teal.500\"\n                _placeholder={{ color: 'gray.500' }}\n              />\n              <InputRightElement width=\"4.5rem\">\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} colorScheme=\"teal\">\n                  {show ? \"Hide\" : \"Show\"}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n          </FormControl>\n          <Button\n            colorScheme=\"teal\"\n            width=\"full\"\n            mt={4}\n            onClick={submitHandler}\n            isLoading={loading}\n          >\n            Login\n          </Button>\n          <Button\n            variant=\"outline\"\n            colorScheme=\"teal\"\n            width=\"full\"\n            onClick={() => {\n              setEmail(\"guest@example.com\");\n              setPassword(\"123456\");\n            }}\n          >\n            Get Guest User Credentials\n          </Button>\n        </VStack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack, Box, Heading } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signup = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const handleClickPassword = () => setShowPassword(!showPassword);\n  const handleClickConfirmPassword = () => setShowConfirmPassword(!showConfirmPassword);\n\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [confirmpassword, setConfirmpassword] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [pic, setPic] = useState(\"\");\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Fields\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      history.push(\"/login\");\n    } catch (error) {\n      toast({\n        title: \"Error Occurred!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"piyushproj\");\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select a Valid Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      w=\"full\"\n      alignItems=\"center\"\n      height=\"100vh\"\n      bgGradient=\"linear(to-r, teal.500, blue.500)\"\n      p={4}\n    >\n      <Box\n        bg=\"gray.700\"\n        textColor=\"white\"\n        p={8}\n        borderRadius=\"md\"\n        boxShadow=\"lg\"\n        width=\"100%\"\n        maxWidth=\"md\"\n        textAlign=\"center\"\n      >\n        <Heading mb={6} size=\"lg\" color=\"teal.600\">\n          Sign Up for an Account\n        </Heading>\n        <VStack spacing=\"24px\">\n          <FormControl id=\"name\" isRequired>\n            <FormLabel>Name</FormLabel>\n            <Input\n              value={name}\n              placeholder=\"Enter Your Name\"\n              onChange={(e) => setName(e.target.value)}\n              borderColor=\"teal.500\"\n              _placeholder={{ color: 'gray.500' }}\n            />\n          </FormControl>\n          <FormControl id=\"email\" isRequired>\n            <FormLabel>Email Address</FormLabel>\n            <Input\n              type=\"email\"\n              value={email}\n              placeholder=\"Enter Your Email Address\"\n              onChange={(e) => setEmail(e.target.value)}\n              borderColor=\"teal.500\"\n              _placeholder={{ color: 'gray.500' }}\n            />\n          </FormControl>\n          <FormControl id=\"password\" isRequired>\n            <FormLabel>Password</FormLabel>\n            <InputGroup size=\"md\">\n              <Input\n                value={password}\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter Password\"\n                onChange={(e) => setPassword(e.target.value)}\n                borderColor=\"teal.500\"\n                _placeholder={{ color: 'gray.500' }}\n              />\n              <InputRightElement width=\"4.5rem\">\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClickPassword} colorScheme=\"teal\">\n                  {showPassword ? \"Hide\" : \"Show\"}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n          </FormControl>\n          <FormControl id=\"confirmpassword\" isRequired>\n            <FormLabel>Confirm Password</FormLabel>\n            <InputGroup size=\"md\">\n              <Input\n                value={confirmpassword}\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                placeholder=\"Confirm Password\"\n                onChange={(e) => setConfirmpassword(e.target.value)}\n                borderColor=\"teal.500\"\n                _placeholder={{ color: 'gray.500' }}\n              />\n              <InputRightElement width=\"4.5rem\">\n                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClickConfirmPassword} colorScheme=\"teal\">\n                  {showConfirmPassword ? \"Hide\" : \"Show\"}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n          </FormControl>\n          <FormControl id=\"pic\">\n            <FormLabel>Upload Your Picture</FormLabel>\n            <Input\n              type=\"file\"\n              p={1.5}\n              accept=\"image/*\"\n              onChange={(e) => postDetails(e.target.files[0])}\n              borderColor=\"teal.500\"\n              _placeholder={{ color: 'gray.500' }}\n            />\n          </FormControl>\n          <Button\n            colorScheme=\"teal\"\n            width=\"full\"\n            mt={4}\n            onClick={submitHandler}\n            isLoading={picLoading}\n          >\n            Sign Up\n          </Button>\n        </VStack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Signup;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport Login from \"./components/Authentication/Login\";\nimport Signup from \"./components/Authentication/Signup\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n      <Route path=\"/login\" component={Login} exact />\n      <Route path=\"/signup\" component={Signup} exact />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}